substitutions:
  name: hello
  board: 'esp32-s3-devkitc-1'
  friendly_name: 'hello'
  device_name: 'hello'
  node_name: 'nesp'
  device_description: 'Rotary Display thermostat on device with WT32-S3-WROVER (16MB) with ST7701S display'  
  project_base: 'Veli'
  project_name: 'Knob'
  project_version: '0.2'
  min_value: "15"
  max_value: "35"
  initial_value: "21"
  ## HA Entities
  climate_entity: climate.ac_living_room
  light_entity: light.lounge_dimmer_2

 
  # for QR code generating
  ap_ssid: ${device_name}
  ap_password: ${device_name}
  ap_guest_ssid: !secret ap_guest_ssid
  ap_guest_password: !secret ap_guest_password

esphome:
  name: ${name}
  friendly_name: hello
  on_boot:
    # priority: 900
    # then:
      # - lambda: |-
      #     id(cpu_speed) = ESP.getCpuFreqMHz();
    - light.turn_on:
        id: led_ring
        effect: rainbow

  platformio_options:
    board_build.flash_mode: dio
  # platformio_options:
  #   platform: https://github.com/platformio/platform-espressif32.git
  #   board: ${board}
  #   framework: arduino
    # platform_packages:
    #   - framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32
    #   - framework-arduinoespressif32-libs @ https://github.com/espressif/esp32-arduino-libs.git#idf-release/v5.1
external_components:
  - source: github://pr#4330
    components: [internal_temperature]
    refresh: always
  # - source:
  #     type: local
  #     path: my_components
  - source:
      type: git
      url: https://github.com/esphome/esphome/
      ref: dev
    components: [ st7701s ]

esp32:
  board: ${board}
  variant: esp32s3
  flash_size: 16MB
  framework:
    # type: arduino
    type: esp-idf

web_server:

globals:
  - id: cpu_speed
    type: int
    restore_value: no
    initial_value: '0'

improv_serial:

packages:
  colors: !include nesp/colors/homeassistant
  # lvgl: !include nesp/packages/lvgl-package.yaml

# font:
#   - file: 'gfonts://Roboto@400'
#     glyphs: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ°.:/+- ' 
#     id: regular
#     size: 24
#   - file: 'gfonts://Roboto@400'
#     glyphs: ' -0123456789°Cecohi'
#     id: huge
#     size: 80
#   - file: 'gfonts://Roboto@400'
#     glyphs: ' -0123456789°Cecohi'
#     id: medium
#     size: 60
#   - file: 'fonts/fa-regular-400.ttf'
#     glyphs: "\uf06c\uf7ae\uf79a\uf06d\uf1eb\ue137\uf011\ue487\uf293\ue00d\uf015\ue1b0\uf624\ue3b0\ue1a7\uf2dc\ue004\uf775\uf2f1\uf863\uf750\uf017"
#     id: symbol
#     size: 32

# esp32_ble_tracker:

# bluetooth_proxy:
#   active: true


# Enable logging
logger:
  level: VERBOSE

debug:
  update_interval: 30s

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.0.124
    gateway: 192.168.0.1
    subnet: 255.255.255.0
    dns1: 192.168.0.20
    dns2: 192.168.0.21

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "hello Fallback Hotspot"
    password: !secret ota_password

captive_portal:

sensor:

  - platform: rotary_encoder
    name: "${friendly_name} Rotary Encoder"
    id: rotaryencoder
    pin_a: 
      number: GPIO6
      mode: INPUT
      #  input: true
      #  pullup: true
    pin_b: 
      number: GPIO5
      mode: INPUT
      #  input: true
      #  pullup: true
    min_value: 0
    max_value: 25
    # filters:
    #   debounce: 30ms
    restore_mode: ALWAYS_ZERO
    filters:
      - or:
        - debounce: 0.1s
        - delta: 10
    on_value:
      then:
        - homeassistant.service:
            service: light.turn_on
            data_template:
              entity_id: light.lounge_dimmer_2
              brightness_pct: "{{ brightness_1 | int }}"
            variables:
              brightness_1: 'return id(rotaryencoder).state * 4;'


  - platform: internal_temperature
    name: "Internal Temperature"

  # - platform: template
  #   name: "ESP CPU Speed"
  #   accuracy_decimals: 0
  #   icon: mdi:cpu-32-bit
  #   unit_of_measurement: Mhz
  #   disabled_by_default: True
  #   lambda: |-
  #     return (id(cpu_speed));
  #   entity_category: "diagnostic"
  #   update_interval: 600s

  # - platform: template
  #   id: sys_esp_temperature
  #   name: ESP Temperature
  #   # lambda: return temperatureRead();
  #   lambda: return cpu-temperature();
  #   unit_of_measurement: °C
  #   device_class: TEMPERATURE
  #   update_interval: 60s
  #   entity_category: "diagnostic"

  - platform: uptime
    id: sys_uptime
    name: Uptime Sensor
    update_interval: 60s

  - platform: wifi_signal
    name: RSSI
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: template
    id: esp_memory
    icon: mdi:memory
    name: ESP Free Memory
    lambda: return heap_caps_get_free_size(MALLOC_CAP_INTERNAL) / 1024;
    unit_of_measurement: 'kB'
    state_class: measurement
    entity_category: "diagnostic"
    update_interval: 60s

  - platform: homeassistant
    entity_id: $climate_entity
    id: current_temperature
    entity_category: "diagnostic"
    internal: true
    attribute: current_temperature
    on_value:
      - script.execute: display_on

  - platform: homeassistant
    entity_id: ${climate_entity}
    entity_category: "diagnostic"
    id: min_temp
    internal: true
    attribute: min_temp

  - platform: homeassistant
    entity_id: $climate_entity
    entity_category: "diagnostic"
    id: max_temp
    internal: true
    attribute: max_temp

  - platform: homeassistant
    entity_id: ${climate_entity}
    id: target_temperature
    entity_category: "diagnostic"
    attribute: temperature
    internal: true

  - platform: homeassistant
    entity_id: ${climate_entity}
    id: target_temp_high
    entity_category: "diagnostic"
    attribute: target_temp_high
    internal: true

  - platform: homeassistant
    entity_id: ${climate_entity}
    id: target_temp_low
    entity_category: "diagnostic"
    attribute: target_temp_low
    internal: true

text_sensor:

  - platform: homeassistant
    entity_id: ${climate_entity}
    id: hvac_mode
    entity_category: "diagnostic"
    internal: true

  - platform: homeassistant
    entity_id: ${climate_entity}
    id: hvac_action
    entity_category: "diagnostic"
    internal: true
    attribute: hvac_action

  - platform: homeassistant
    entity_id: ${climate_entity}
    id: preset_mode
    entity_category: "diagnostic"
    internal: true
    attribute: preset_mode

time:
  - platform: sntp
    id: time_now

button:
  - platform: restart
    icon: mdi:power-cycle
    name: "${device_name} Reboot"

  - platform: factory_reset
    disabled_by_default: True
    name: "${device_name} Factory Reset"
    id: factory_reset_al

  - platform: template      # Home assistant control
    id: ${device_name}_vibrate_on
    name: "${device_name} Vibrate ON"
    icon: "mdi:vibrate"
    on_press:
      - script.execute: vibrate_on

  - platform: template      # Home assistant control
    id: ${device_name}_vibrate_off
    name: "${device_name} Vibrate OFF"
    icon: "mdi:vibrate"
    on_press:
      - script.execute: vibrate_off

  - platform: template      # Home assistant control
    id: ${device_name}_vibrate_button
    name: "${device_name} Vibrate Button"
    icon: "mdi:vibrate"
    on_press:
      - script.execute: vibrate
  
  - platform: template      # Home assistant control
    id: ${device_name}_long_vibrate
    name: "${device_name} Long Vibrate"
    icon: "mdi:vibrate"
    on_press:
      - script.execute: long_vibrate
  
  - platform: template      # Home assistant control
    id: ${device_name}_light_decrease
    name: "${device_name} Light Decrease"
    icon: "mdi:vibrate"
    on_press:  
      - homeassistant.service:
          service: script.lounge_dimmer_decrease  
  - platform: template      # Home assistant control
    id: ${device_name}_light_increase
    name: "${device_name} Light Increase"
    icon: "mdi:vibrate"
    on_press:  
      - homeassistant.service:
          service: script.lounge_dimmer_increase

output:
  - platform: ledc
    id: ${device_name}_backlight_pwm
    pin: GPIO38
    zero_means_zero: true

light:
  - platform: monochromatic
    id: ${device_name}_backlight
    output: ${device_name}_backlight_pwm
    icon: mdi:brightness-percent
    name: None
    default_transition_length: 500ms
    restore_mode: ALWAYS_ON
    # on_turn_on:
    #   then:
    #     - component.update: ${device_name}_display
    #     - if:
    #         condition:
    #           or:
    #             - display.is_displaying_page: page_qr_wifi
    #             - display.is_displaying_page: page_qr_esphome
    #             - display.is_displaying_page: page_boot
    #         then:
    #           - light.turn_on: ${device_name}_backlight
    #         else:
    #           - delay: 120s
    #           - light.turn_off: ${device_name}_backlight


  - platform: esp32_rmt_led_strip
    id: led_ring
    name: "${friendly_name} Light"
    pin: GPIO4
    num_leds: 15
    rmt_channel: 0
    rgb_order: GRB
    chipset: ws2812
    restore_mode: ALWAYS_ON
    effects:
      - pulse:
      - random:
      - strobe:
      - addressable_rainbow:
      - addressable_color_wipe:
      - addressable_scan:
      - addressable_twinkle:
      - addressable_random_twinkle:
      - addressable_fireworks:


  #   effects:
  #     # Use default parameters:
  #     - random:
  #     # Customize parameters
  #     - random:
  #         name: "My Slow Random Effect"
  #         transition_length: 30s
  #         update_interval: 30s
  #     - random:
  #         name: "My Fast Random Effect"
  #         transition_length: 4s
  #         update_interval: 5s
  #     - pulse:
  #     - pulse:
  #         name: "Fast Pulse"
  #         transition_length: 0.5s
  #         update_interval: 0.5s
  #         min_brightness: 0%
  #         max_brightness: 100%
  #     - pulse:
  #         name: "Slow Pulse"
  #         # transition_length: 1s      # defaults to 1s
  #         update_interval: 2s
  #     - pulse:
  #         name: "Asymmetrical Pulse"
  #         transition_length:
  #           on_length: 1s
  #           off_length: 500ms
  #         update_interval: 1.5s
  #     - strobe:
  #     - strobe:
  #         name: Strobe Effect With Custom Values
  #         colors:
  #           - state: true
  #             brightness: 100%
  #             red: 100%
  #             green: 90%
  #             blue: 0%
  #             duration: 500ms
  #           - state: false
  #             duration: 250ms
  #           - state: true
  #             brightness: 100%
  #             red: 0%
  #             green: 100%
  #             blue: 0%
  #             duration: 500ms

# select: 
#   - platform: template
#     name: Page
#     id: ${device_name}_page
#     internal: true
#     options:
#       - boot
#       - qr_wifi
#       - qr_esphome
#       - climate
#     optimistic: true
#     on_value:
#       then:
#       - lambda: |-
#           auto page = id(${device_name}_page).state;
#           auto display = id(${device_name}_display);
#           if ("climate" == page){
#             display->show_page( id(page_climate) );
#           }
#           if ("boot" == page){
#             display->show_page( id(page_boot) );
#           }
#           if ("qr_wifi" == page){
#             display->show_page( id(page_qr_wifi) );
#           }
#           if ("qr_esphome" == page){
#             display->show_page( id(page_qr_esphome) );
#           }

switch: 
  # - platform: gpio
  #   pin: 
  #     number: 7 #Vibrating motor |	Feedback for human-computer interaction |	GPIO 7
  #   name: Motor
  #   id: ${device_name}_motor
  #   entity_category: diagnostic
  #   icon: mdi:vibrate
  #   on_turn_on:
  #     then:
  #       - delay: 0.1s
  #       - switch.turn_off: ${device_name}_motor
  #   internal: true
  - platform: gpio
    pin: 
      number: 7 #Vibrating motor |	Feedback for human-computer interaction |	GPIO 7
    name: Motor
    id: ${device_name}_motor
    entity_category: diagnostic
    icon: mdi:vibrate
    internal: true

script:
  # vibrate/haptics
  - id: lounge_light_increase
    then:
      - homeassistant.service:
          service: script.lounge_dimmer_increase

  - id: lounge_light_decrease
    then:
      - homeassistant.service:
          service: script.lounge_dimmer_decrease
  
  - id: toggle_lounge_light
    then:
      - homeassistant.service:
          service: light.toggle
          data:
            entity_id: ${light_entity}

  - id: vibrate
    then: 
      - switch.turn_on: ${device_name}_motor
      - delay: 0.1s
      - logger.log: "vibrate"
      - switch.turn_off: ${device_name}_motor

  - id: vibrate_on
    then: 
      - switch.turn_on: ${device_name}_motor
      - delay: 0.1s
      - logger.log: "vibrate ON"

  - id: vibrate_off
    then: 
      - switch.turn_off: ${device_name}_motor
      - delay: 0.1s
      - logger.log: "vibrate OFF"
  
  - id: light_toggle_vibrate
    then: 
      - switch.turn_on: ${device_name}_motor
      - delay: 0.1s
      - logger.log: "light_toggle_vibrate"
      - switch.turn_off: ${device_name}_motor
      - homeassistant.service:
          service: light.toggle
          data:
            entity_id: ${light_entity}

  - id: long_vibrate
    then:
      - switch.turn_on: ${device_name}_motor
      - delay: 2s
      - logger.log: "long vibrate"
      - switch.turn_off: ${device_name}_motor

  # - id: decrement_number
  #   then:
  #     - number.decrement: ${device_name}_number
  # - id: increment_number
  #   then:
  #     - number.increment: ${device_name}_number


  # display pages
  # - id: show_page_boot
  #   mode: single
  #   then: 
  #     - display.page.show: page_boot
  #     - delay: 5s
  #     - if:
  #         condition:
  #           and:
  #             - wifi.connected:
  #             - api.connected:
  #         then:
  #           - script.execute: show_page_climate
  #         else:
  #           - script.stop: show_page_boot
  #           - script.execute: show_page_boot
  # - id: show_page_climate
  #   then:
  #     - script.execute: display_on
  #     - display.page.show: page_climate 
  # - id: decrement_number
  #   then:
  #     - number.decrement: ${device_name}_number
  # - id: increment_number
  #   then:
  #     - number.increment: ${device_name}_number
  - id: display_off
    then:
      - light.turn_off: ${device_name}_backlight
  - id: display_on
    then:
      - light.turn_on: ${device_name}_backlight
      # - component.update: ${device_name}_display
  # - id:incrimental_full_light_button
  #   filters:
  #     - invert:
  #   on_multi_click:
  #   - timing:
  #       - ON for 0.1s to 1s
  #     then:
  #       - logger.log: "Lounge Lights 25%"
  #       - homeassistant.service:
  #           service: input_select.select_next
  #           data:
  #             entity_id: input_select.hue_scenes
  #   - timing:
  #       - ON for 1.1s to 2s
  #     then:
  #       - logger.log: "Lounge Lights 50%"
  #       - homeassistant.service:
  #           service: input_boolean.toggle
  #           data:
  #             entity_id: input_boolean.radio_woonkamer

binary_sensor:
  - platform: template
    id: is_motor_running
    on_press:
      then:
        - switch.turn_on: ${device_name}_motor             # Turn on motor.
        
    on_release:
      then:
        - switch.turn_off: ${device_name}_motor            # Turn off motor.
##Hall encoder	
## Hall encoder is used for rotating operation in human-computer interaction, and orthogonal encoder is adopted
## GPIO 5、6
  # - platform: gpio
  #   pin: 
  #     number: 6 #17 
  #   name: Turn Left # is okay
  #   internal: true
  #   id: ${device_name}_gpio6_debounced
  #   on_press:
  #     then:
  #       - script.execute: lounge_light_decrease
  #       - logger.log:
  #           format: "rotate left. Calling script light decrease."
  #           level: DEBUG
  #       # - script.execute: vibrate   # Run the motor.
  # - platform: gpio
  #   pin: 
  #     number: 5 #16
  #   name: Turn Right
  #   id: ${device_name}_gpio5_debounced
  #   internal: true
  #   on_press:
  #     then:
  #       - script.execute: lounge_light_increase
  #       - logger.log:
  #           format: "rotate right. Calling script light increase."
  #           level: DEBUG
  #   #     - script.execute: vibrate   # Run the motor.


  - platform: gpio
    pin: 
      number: 3 #GPIO5 #GPIO14 # GPIO12
#      mode: INPUT_PULLUP
#      inverted: true
      mode:
        input: true
        pullup: true
    name: Button
    internal: true
    id: ${device_name}_button
    icon: mdi:circle-outline
## Cant get it to work reliably    
    filters:
#      - invert:
      - delayed_on: 200ms 
      # When a signal ON is received, wait until publishing an ON state. If an OFF value is received while waiting, the ON action is discarded. 
      # Only send an ON value if the binary sensor has stayed ON for at least the specified time period. 
      ## Useful for debouncing push buttons.
      - delayed_off: 100ms 
      # When a signal OFF is received, wait until publishing an OFF state. 
      # If an ON value is received while waiting, the OFF action is discarded. 
      # Only send an OFF value if the binary sensor has stayed OFF for at least the specified time period. 
      ## Useful for debouncing push buttons.
      - delayed_on_off: 300ms 
      # Only send an ON or OFF value if the binary sensor has stayed in the same state for at least the specified time period. 
      ## Useful for debouncing binary switches.
    on_press:
      then:
        - script.execute: vibrate
        - script.execute: toggle_lounge_light
        # - logger.log:
        #     format: "button pressed at %.lu"
        #     level: DEBUG
      # - logger.log:
      #     format: "button pressed at %lu"
      # - lambda: |-      
      #     # ESP_LOGW("button", "pressed at %lu", millis());
      #     ESP_LOGW("button", "pressed at %lu", (unsigned int)esp_log_timestamp());
    # on_release:
    #   then:
    #     - logger.log:
    #         format: "button released at %.lu"
    #         level: DEBUG
      # - lambda: |-      
      #     ESP_LOGE("button", "release at %lu", (unsigned int)esp_log_timestamp());
psram:
  mode: octal
  speed: 80MHz

spi:
  - id: lcd_spi
    clk_pin:
      number: 47 #47 # sck : 14
      allow_other_uses: true
    mosi_pin:
      number: 41 #41 # sda : 33
      allow_other_uses: true
    # software: true
    # interface: hardware
display:
  - platform: st7701s
    id: ${device_name}_display
    auto_clear_enabled: false
    update_interval: 5s
    spi_mode: MODE3
    color_order: RGB
    dimensions:
      width: 480
      height: 480
    invert_colors: true
    transform:
      mirror_x: true
      mirror_y: true
    cs_pin: 21
    de_pin: 39
    hsync_pin: 40 #16
    vsync_pin: 48 #17
    pclk_pin: 45
    init_sequence:
      - 1 # select canned init sequence number 1
      #- [0x3A, 0x50] # 16 bit pixel format. (wrong)
      #- [0x3A, 0x60] # 18 bit pixel format. (this is default configuration. No need to apply)
      # - [0xFF, 0x77, 0x01, 0x00, 0x00, 0x10] # CMD2_BKSEL_BK0
      # - [0xCD, 0x00] # disable MDT flag
    data_pins:
      red:
        - number: 10        #R1
        - number: 16        #R2
        - number: 9         #R3
        - number: 15        #R4
        - number: 46        #R5
          ignore_strapping_warning: true
      green:
        - number: 8         #G0
        - number: 13        #G1
        - number: 18        #G2
        - number: 12        #G3
        - number: 11        #G4
        - number: 17        #G5
      blue:
        - number: 47        #B1
          allow_other_uses: true
        - number: 41        #B2
          allow_other_uses: true
        - number: 0         #B3
          ignore_strapping_warning: true
        - number: 42        #B4
        - number: 14        #B5
